name: Docker Build and Push

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        run: |
          docker build -t pg-repack-test .

      - name: Test pg_repack version
        run: |
          output=$(docker run --rm pg-repack-test pg_repack --version 2>&1)
          echo "Command output: $output"
          echo "Raw output (with special chars): $(echo "$output" | cat -A)"
          
          # More flexible version check - look for pg_repack and version pattern
          if echo "$output" | grep -i "pg_repack" | grep -E "[0-9]+\.[0-9]+(\.[0-9]+)?"; then
            echo "✅ Test passed: pg_repack version command works correctly"
          else
            echo "❌ Test failed: pg_repack version command did not produce expected output"
            echo "Expected format: pg_repack followed by version number (e.g., pg_repack 1.5.2)"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build multi-platform image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate tags
        id: tags
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # For tags, use the tag name
            TAG=${GITHUB_REF#refs/tags/}
            echo "tags=hartmutcouk/pg-repack-docker:$TAG,hartmutcouk/pg-repack-docker:latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, use PR number and short hash
            BRANCH_NAME="pr-${{ github.event.number }}"
            SHORT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
            echo "tags=hartmutcouk/pg-repack-docker:${BRANCH_NAME}.${SHORT_HASH}" >> $GITHUB_OUTPUT
          else
            # For master/main branch commits, normalize branch name and use short hash
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            SHORT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
            echo "tags=hartmutcouk/pg-repack-docker:${BRANCH_NAME}.${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  report-failure:
    runs-on: ubuntu-latest
    needs: [test, build, build-and-push]
    if: always() && (needs.test.result == 'failure' || needs.build.result == 'failure' || needs.build-and-push.result == 'failure')

    steps:
      - name: Report build failure
        run: |
          echo "❌ Build or test failed!"
          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "- Test job failed"
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "- Build job failed"
          fi
          if [[ "${{ needs.build-and-push.result }}" == "failure" ]]; then
            echo "- Build and push job failed"
          fi
          exit 1
